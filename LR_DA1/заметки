На эту программу:
+1.нельзя было использовать ничего кроме uint64
2.выяснить зачем нужен maxKey (либо убрать либо объяснить)
+3.объяснить что здесь это точно поразрядная
+4.узнать почему 2049 в 126 строчке (2048 символов с учётом \0)
5.исправить чтобы памяти на символьное значение выделялось ровно столько сколько надо, а не 2049 каждый раз (тк сказано ПЕРЕМЕННОЙ длинны)  ?????????????не смог
+6.исправить конструкторы (capacity и size не должны быть равны одному newSize)
правильно инициализировать capacity и size

7.оставиить только TVector(size_t newSize) {
создавать вектор с размером 8 (вызывать конструктор с размером 8)
использовать конкретный конструктор с конкретным параметром

мб еще TVector(const TVector& v) { но возможно он не нужен

+8.96-97 std swap использовать в данном случае неправильно, потому что это изменяет other
метод в 102-115 не должен изменять other (он записывает нулевые значения, удаляет storage)





5)в main можно выделить массив char на [2049]
и через cin читать в этот массив
после прочтения нужно посчитать длину строки
после этого можно выделить новый массив нужной длины
скопировать данные из этого временного массива в новый массив
и в TElem присвоить этот новый массив
на каждой новой итерации тот временный массив можно переиспользовать

в TElem должно быть не массив char[2049], а указатель на char очень похожий на то как сделан указатель на T* storage = nullptr; (120 стр)
но тогда в дескруторе TVector нужно проверить тип T, если это TElem, то перед тем как удалять storage, нужно удалить строки из каждого TElem

7)избавиться от лишних конструкторов вверху





На будущее:
разобраться на что влияет огр памяти 64Мб +
понимание сортировок
поразрядная сортировка +
переименовать PushBack в AddLast +
когда разберусь увеличивать нужно будет не в 10, а в 2 раза
нужно удалить весь лишний неиспользуемый код

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);

    TVector<TElem> vec;
    TElem temp;
    while (std::cin >> temp.Key >> temp.Value) {
        vec.PushBack(temp);
    }   

    vec = vec.Sort();

    int M = vec.sizeM();

    for (i = 0; i < M; i++) {
        temp = vec[i];
        std::cout « temp.Key « " " « temp.Value « "\n";
    }   
}


по первой лабе:
1. в 186й строке, почему +2 а не +1?
2. в 187й строке нужно использовать std::strcpy
3. в конце программы не удаляются vec, vecSort, Result
4. SizeStr (167-171) не используется нигде
5. не переделано то замечание, что TVector должен изначально создаваться на 8 элементов, а потом внутри AddLast увеличиваться в 2 раза, а не в 10 
 
после исправлений нужно попробовать запустить еще раз на чекере, особых ошибок не вижу, скорей всего косяк из-за пунктов 1-2
 
когда исправишь 5, работать будет заметно быстрее